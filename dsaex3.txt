/*Roll_No.-12132 ABHISHEK SHRIKRUSHNA DOKE

Experiment No: 3
Title :A book consists of chapters, chapters consist of sections and
sections consist of subsections. Construct a tree and print the nodes.
Find the time and space requirements of your method.


Program:                                                     */

#include <iostream>
#include <cstdlib> // For NULL
#include <cstring> // For strcpy

using namespace std;

struct node {
    char label[60];
    int chcount;
    node* child[50];
};

class General {
private:
    node* root;

public:
    General() : root(NULL) {} // Corrected the assignment operator
    void insert();
    void display();
};

void General::insert() {
    if (root != NULL) {
        cerr << "Error: Book already exists!" << endl;
        return;
    }

    root = new node();
    cout << "Enter the name of the book: " << endl;
    cin >> root->label;
    cout << "Enter the total number of chapters in the book: " << endl;
    cin >> root->chcount;

    for (int i = 0; i < root->chcount; i++) {
        root->child[i] = new node();
        cout << "Enter the name of chapter " << i + 1 << ": " << endl;
        cin >> root->child[i]->label;
        cout << "Enter the number of sections in chapter " << i + 1 << ": " << endl;
        cin >> root->child[i]->chcount;

        for (int j = 0; j < root->child[i]->chcount; j++) {
            root->child[i]->child[j] = new node();
            cout << "Enter the name of section " << j + 1 << " in chapter " << i + 1 << ": " << endl;
            cin >> root->child[i]->child[j]->label;
            cout << "Enter the number of subsections in section " << j + 1 << " in chapter " << i + 1 << ": " << endl;
            cin >> root->child[i]->child[j]->chcount;

            for (int k = 0; k < root->child[i]->child[j]->chcount; k++) {
                root->child[i]->child[j]->child[k] = new node();
                cout << "Enter the name of subsection " << k + 1 << " in section " << j + 1 << " in chapter " << i + 1 << ": " << endl;
                cin >> root->child[i]->child[j]->child[k]->label;
            }
        }
    }
}

void displayHelper(const node* current, int level) {
    if (current != NULL) {
        for (int i = 0; i < level; i++) {
            cout << "----";
        }
        cout << current->label << endl;

        for (int i = 0; i < current->chcount; i++) {
            displayHelper(current->child[i], level + 1);
        }
    }
}

void General::display() {
    if (root != NULL) {
        cout << "********** Hierarchy of Book **********" << endl;
        cout << "Book Name: " << root->label << endl;

        for (int i = 0; i < root->chcount; i++) {
            cout << "-- " << root->child[i]->label << endl;

            for (int j = 0; j < root->child[i]->chcount; j++) {
                cout << "---- " << root->child[i]->child[j]->label << endl;

                for (int k = 0; k < root->child[i]->child[j]->chcount; k++) {
                    cout << "-------- " << root->child[i]->child[j]->child[k]->label << endl;
                }
            }
        }
    }
}

int main() {
    General g;
    int ch;
    do {
        cout << "~~~~~ MENU ~~~~~" << endl;
        cout << "1. Insert." << endl;
        cout << "2. Display." << endl;
        cout << "Enter the choice: " << endl;
        cin >> ch;
        switch (ch) {
            case 1:
                g.insert();
                break;
            case 2:
                g.display();
                break;
        }
    } while (ch < 3);
    return 0;
}

/*
Output:

student@proglab-OptiPlex-3010:~$ g++ shr1.cpp
student@proglab-OptiPlex-3010:~$ ./a.out
~~~~~ MENU ~~~~~
1. Insert.
2. Display.
Enter the choice:
1
Enter the name of book:
java
Enter the total number of chapters in book:
2
Enter the name of chapters:
operators
Enter the number of sections:
2
Enter the name of section:
arithmetic
Enter the number of sub sections:
1
Enter the name of sub section:
Addition
Enter the name of section:
Logical
Enter the number of sub sections:
2
Enter the name of sub section:
And
Enter the name of sub section:
Or
Enter the name of chapters:
applet
Enter the number of sections:
1
Enter the name of section:
lifecycle
Enter the number of sub sections:
1
Enter the name of sub section:
beginning
~~~~~ MENU ~~~~~
1. Insert.
2. Display.
Enter the choice:
2
********** Hierarchy of Book **********
Book Name is java
— operators
——– arithmetic
—————– Addition
——– Logical
—————– And
—————– Or
— applet
——– lifecycle
—————– beginning                                                                    */